# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'test.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import mail
import comment
import datetime


class Ui_MainWindow(object):
    def __init__(self):
        self.fname_acc = ''
        self.fname_blogger = ''
        self.num_of_row_account = 0 # 네이버 계정 개수
        self.num_of_row_blogger = 0 # 블로거 계정 개수
        self.num_of_row_log = 0     # 로그 개수

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(881, 424)
        MainWindow.setMinimumSize(QtCore.QSize(881, 424))
        MainWindow.setMaximumSize(QtCore.QSize(881, 424))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icon/icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setAutoFillBackground(False)
        MainWindow.setStyleSheet("")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(500, 380, 101, 31))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.txtContent = QtWidgets.QTextEdit(self.centralwidget)
        self.txtContent.setGeometry(QtCore.QRect(500, 90, 371, 161))
        self.txtContent.setObjectName("txtContent")
        self.txtSubject = QtWidgets.QLineEdit(self.centralwidget)
        self.txtSubject.setGeometry(QtCore.QRect(500, 40, 371, 31))
        font = QtGui.QFont()
        font.setFamily("굴림")
        font.setPointSize(9)
        font.setBold(False)
        font.setWeight(50)
        self.txtSubject.setFont(font)
        self.txtSubject.setMaxLength(50)
        self.txtSubject.setObjectName("txtSubject")
        self.tableAccount = QtWidgets.QTableWidget(self.centralwidget)
        self.tableAccount.setGeometry(QtCore.QRect(10, 40, 311, 331))
        self.tableAccount.setObjectName("tableAccount")
        self.tableAccount.setColumnCount(3)
        self.tableAccount.setRowCount(0)
        self.tableAccount.verticalHeader().setVisible(False)
        item = QtWidgets.QTableWidgetItem()
        self.tableAccount.horizontalHeader().setDefaultSectionSize(103)
        self.tableAccount.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableAccount.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableAccount.setHorizontalHeaderItem(2, item)
        self.btnAuth = QtWidgets.QPushButton(self.centralwidget)
        self.btnAuth.setGeometry(QtCore.QRect(161, 380, 161, 31))
        self.btnAuth.setObjectName("btnAuth")
        self.tableBlogger = QtWidgets.QTableWidget(self.centralwidget)
        self.tableBlogger.setGeometry(QtCore.QRect(340, 40, 141, 331))
        self.tableBlogger.setObjectName("tableBlogger")
        self.tableBlogger.setColumnCount(1)
        self.tableBlogger.setRowCount(0)
        self.tableBlogger.verticalHeader().setVisible(False)
        item = QtWidgets.QTableWidgetItem()
        self.tableBlogger.setHorizontalHeaderItem(0, item)
        self.tableBlogger.horizontalHeader().setDefaultSectionSize(140)
        self.btnSaveLog = QtWidgets.QPushButton(self.centralwidget)
        self.btnSaveLog.setGeometry(QtCore.QRect(790, 255, 81, 31))
        self.btnSaveLog.setObjectName("btnSaveLog")
        self.tableLog = QtWidgets.QTableWidget(self.centralwidget)
        self.tableLog.setGeometry(QtCore.QRect(500, 290, 371, 81))
        self.tableLog.setObjectName("tableLog")
        self.tableLog.setColumnCount(1)
        self.tableLog.setRowCount(0)
        self.tableLog.verticalHeader().setVisible(False)
        item = QtWidgets.QTableWidgetItem()
        self.tableLog.setHorizontalHeaderItem(0, item)
        self.tableLog.horizontalHeader().setDefaultSectionSize(370)
        self.btnSendMail = QtWidgets.QPushButton(self.centralwidget)
        self.btnSendMail.setGeometry(QtCore.QRect(610, 380, 81, 31))
        self.btnSendMail.setObjectName("btnSendMail")
        self.btnWriteComment = QtWidgets.QPushButton(self.centralwidget)
        self.btnWriteComment.setGeometry(QtCore.QRect(700, 380, 81, 31))
        self.btnWriteComment.setObjectName("btnWriteComment")
        self.label_1 = QtWidgets.QLabel(self.centralwidget)
        self.label_1.setGeometry(QtCore.QRect(10, 10, 181, 21))
        self.label_1.setObjectName("label_1")
        self.btnLoadAccount = QtWidgets.QPushButton(self.centralwidget)
        self.btnLoadAccount.setGeometry(QtCore.QRect(9, 380, 140, 31))
        self.btnLoadAccount.setObjectName("btnLoadAccount")
        self.btnLoadBlogger = QtWidgets.QPushButton(self.centralwidget)
        self.btnLoadBlogger.setGeometry(QtCore.QRect(339, 380, 143, 31))
        self.btnLoadBlogger.setObjectName("btnLoadBlogger")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(340, 10, 121, 21))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(500, 10, 121, 21))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(500, 260, 121, 21))
        self.label_4.setObjectName("label_4")
        self.btnStop = QtWidgets.QPushButton(self.centralwidget)
        self.btnStop.setGeometry(QtCore.QRect(790, 380, 81, 31))
        self.btnStop.setObjectName("btnStop")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # 이벤트 연결
        self.connectEvent()
        # 쓰레드 연결
        self.auth_thread = mail.AuthThread(self.centralwidget, self)
        self.mail_thread = mail.MailThread(self.centralwidget, self)
        self.comment_thread = comment.CommentThread(self.centralwidget, self)
        # 시그널 연결
        self.auth_thread.table_changed.connect(self.updateTable)
        self.auth_thread.add_log.connect(self.addLog)
        self.mail_thread.add_log.connect(self.addLog)
        self.comment_thread.add_log.connect(self.addLog)


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Naver Mail & Comment Helper"))
        self.comboBox.setItemText(0, _translate("MainWindow", "10"))
        self.comboBox.setItemText(1, _translate("MainWindow", "20"))
        self.comboBox.setItemText(2, _translate("MainWindow", "30"))
        self.txtContent.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Gulim\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">안녕하세요^^</p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">혹시 블로그를 통해 포스팅 해보실 의향 없으신가요?</p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">준비된 원고를 보내드리면 블로그에 복붙해서 올려주시면 되고, 한 건 올리시는데 5분 이내로 소요됩니다.</p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">저희는 업체 홍보 리뷰, 제품, 맛집, 뷰티, 홍보 리뷰를 주로 하는 업체입니다.</p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">포스팅 비용은 건당 2~3만원 입니다!</p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">저희 업체는 불법적인 키워드가 아닌 합법적인 키워드만 취급하고 있습니다.</p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">원고는 일주일에 10~15건 정도 드리며, 하실 의향이나 궁금하신 점 있으시면 010-8733-7408로 연락주세요!</p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">긴 글 읽어주셔서 감사합니다.</p></body></html>"))
        self.txtContent.setPlaceholderText(_translate("MainWindow", "내용"))
        self.txtSubject.setText(_translate("MainWindow", "메일 제목 (블로그 댓글은 설정 안 해도 됨)"))
        self.txtSubject.setPlaceholderText(_translate("MainWindow", "제목"))
        item = self.tableAccount.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "아이디"))
        item = self.tableAccount.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "비밀번호"))
        item = self.tableAccount.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "사용가능"))
        self.btnAuth.setText(_translate("MainWindow", "사용가능 여부 체크"))
        item = self.tableBlogger.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "블로거 아이디"))
        self.btnSaveLog.setText(_translate("MainWindow", "로그 저장"))
        item = self.tableLog.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "내용"))
        self.btnSendMail.setText(_translate("MainWindow", "메일발송"))
        self.btnWriteComment.setText(_translate("MainWindow", "댓글작성"))
        self.label_1.setText(_translate("MainWindow", "네이버 계정 등록 (메일/댓글용)"))
        self.btnLoadAccount.setText(_translate("MainWindow", "계정 불러오기"))
        self.btnLoadBlogger.setText(_translate("MainWindow", "블로거 불러오기"))
        self.label_2.setText(_translate("MainWindow", "블로거 계정 등록"))
        self.label_3.setText(_translate("MainWindow", "내용 작성 (메일/댓글)"))
        self.label_4.setText(_translate("MainWindow", "프로그램 로그"))
        self.btnStop.setText(_translate("MainWindow", "작업중단"))

    # 시그널
    def updateTable(self, table_type, idx, val):
        if table_type == 'Account':
            if val == 1:
                self.tableAccount.setItem(idx, 2, QtWidgets.QTableWidgetItem('O'))
            elif val == 0:
                self.tableAccount.setItem(idx, 2, QtWidgets.QTableWidgetItem('X'))
            self.tableAccount.item(idx, 2).setTextAlignment(QtCore.Qt.AlignCenter)
        else:
            pass

    def addLog(self, log):
        now = datetime.datetime.now()
        nowDatetime = now.strftime('%Y.%m.%d %H:%M:%S')

        log = '[{0}] '.format(nowDatetime) + log 

        self.tableLog.insertRow(self.num_of_row_log)
        self.tableLog.setItem(self.num_of_row_log, 0, QtWidgets.QTableWidgetItem(log))
        self.num_of_row_log = self.num_of_row_log + 1

    # 이벤트 연결 메소드
    def connectEvent(self):
        self.btnLoadAccount.clicked.connect(self.clickLoadAccount)
        self.btnAuth.clicked.connect(self.clickAuthSMTP)
        self.btnLoadBlogger.clicked.connect(self.clickLoadBlogger)
        self.btnSaveLog.clicked.connect(self.clickSaveLog)
        self.btnSendMail.clicked.connect(self.clickSendMail)
        self.btnStop.clicked.connect(self.clickStop)
        self.btnWriteComment.clicked.connect(self.clickWriteComment)

    # 버튼 이벤트 (계정 불러오기)
    def clickLoadAccount(self, event):
        # 테이블 초기화
        self.clearTable('Account')

        self.fname_acc = QtWidgets.QFileDialog.getOpenFileName(self.centralwidget, '네이버 계정 리스트 (Text File)', '', '텍스트 파일(*.txt)')

        # 파일을 올바르게 선택했다면, 테이블에 항목을 채움
        if self.fname_acc[0]:
            try:
                with open(self.fname_acc[0], mode='rt', encoding='utf-8') as f:
                    for line in f.readlines():
                        self.tableAccount.insertRow(self.num_of_row_account)
                        # acc[0] = ID, acc[1] = PW
                        acc = line.splitlines()[0].split(' ')
                        self.tableAccount.setItem(self.num_of_row_account, 0, QtWidgets.QTableWidgetItem(acc[0]))
                        self.tableAccount.item(self.num_of_row_account, 0).setTextAlignment(QtCore.Qt.AlignCenter)
                        self.tableAccount.setItem(self.num_of_row_account, 1, QtWidgets.QTableWidgetItem(acc[1]))
                        self.tableAccount.item(self.num_of_row_account, 1).setTextAlignment(QtCore.Qt.AlignCenter)
                        self.num_of_row_account = self.num_of_row_account + 1

                self.addLog('네이버 계정 리스트 로드 완료')
            except:
                QtWidgets.QMessageBox.about(self.centralwidget, 'Warning', '파일이 올바르지 않습니다.')
                self.num_of_row_account = self.num_of_row_account + 1
                # 테이블 초기화
                self.clearTable('Account')
                self.fname_acc = ''
        else:
            QtWidgets.QMessageBox.about(self.centralwidget, 'Warning', '파일을 선택하지 않았습니다.')
            self.fname_acc = ''

    # 버튼 이벤트 (사용가능 여부 체크)
    def clickAuthSMTP(self, event):
        _tuple = ('1', 1, 1.0)
        # 타입 비교를 통한 파일 오픈 여부
        if type(self.fname_acc) == type(_tuple):
            self.auth_thread.start()
        else:
            QtWidgets.QMessageBox.about(self.centralwidget, 'Warning', '파일을 선택하지 않았습니다.')

    # 버튼 이벤트 (블로거 불러오기)
    def clickLoadBlogger(self, event):
        # 테이블 초기화
        self.clearTable('Blogger')

        self.fname_blogger = QtWidgets.QFileDialog.getOpenFileName(self.centralwidget, '블로거 리스트 (Text File)', '', '텍스트 파일(*.txt)')

        # 파일을 올바르게 선택했다면, 테이블에 항목을 채움
        if self.fname_blogger[0]:
            try:
                with open(self.fname_blogger[0], mode='rt', encoding='utf-8') as f:
                    for line in f.read().splitlines():
                        self.tableBlogger.insertRow(self.num_of_row_blogger)
                        self.tableBlogger.setItem(self.num_of_row_blogger, 0, QtWidgets.QTableWidgetItem(line))
                        self.tableBlogger.item(self.num_of_row_blogger, 0).setTextAlignment(QtCore.Qt.AlignCenter)
                        self.num_of_row_blogger = self.num_of_row_blogger + 1

                self.addLog('블로거 리스트 로드 완료')
            except:
                QtWidgets.QMessageBox.about(self.centralwidget, 'Warning', '파일이 올바르지 않습니다.')
                self.num_of_row_blogger = self.num_of_row_blogger + 1
                # 테이블 초기화
                self.clearTable('Blogger')
                self.fname_blogger = ''
        else:
            QtWidgets.QMessageBox.about(self.centralwidget, 'Warning', '파일을 선택하지 않았습니다.')
            self.fname_blogger = ''

    # 버튼 이벤트 (로그저장)
    def clickSaveLog(self, event):
        # 메소드 수행 후 다이얼로그 출력
        if self.num_of_row_log == 0:
            QtWidgets.QMessageBox.about(self.centralwidget, 'Warning', '로그가 없습니다.')
        else:
            fname = '{0}_log.txt'.format(int(datetime.datetime.now().timestamp()))
            with open('./log/' + fname, mode='wt', encoding='utf-8') as f:
                idx = 0
                while idx < self.num_of_row_log:
                    f.write(self.tableLog.item(idx, 0).text() + '\n')
                    idx = idx + 1

            QtWidgets.QMessageBox.about(self.centralwidget, 'Warning', '로그 저장 완료')

    # 버튼 이벤트 (메일발송)
    def clickSendMail(self, event):
        # 리스트들이 비어있으면 실패
        if self.num_of_row_account == 0 or self.num_of_row_blogger == 0:
            QtWidgets.QMessageBox.about(self.centralwidget, 'Warning', '리스트를 추가해주세요.')
        else:
            # 사용가능 여부가 체크되어 있지 않을 때
            try:
                if self.tableAccount.item(0, 2).text():
                    self.mail_thread.working = True
                    self.mail_thread.start()
            except:
                QtWidgets.QMessageBox.about(self.centralwidget, 'Warning', '사용가능 여부를 체크해주세요.')
            

    # 버튼 이벤트 (댓글작성)
    def clickWriteComment(self, event):
        # 리스트들이 비어있으면 실패
        if self.num_of_row_account == 0 or self.num_of_row_blogger == 0:
            QtWidgets.QMessageBox.about(self.centralwidget, 'Warning', '리스트를 추가해주세요.')
        else:
            # 사용가능 여부가 체크되어 있지 않을 때
            try:
                if self.tableAccount.item(0, 2).text():
                    self.comment_thread.working = True
                    self.comment_thread.start()
            except:
                QtWidgets.QMessageBox.about(self.centralwidget, 'Warning', '사용가능 여부를 체크해주세요.')

    # 버튼 이벤트 (작업중단)
    def clickStop(self, event):
        if self.mail_thread.working:
            self.mail_thread.stop()
        if self.comment_thread.working:
            self.comment_thread.stop()

    # 테이블 초기화
    def clearTable(self, table_type):
        if table_type == 'Account':
            temp = 0
            if temp < self.num_of_row_account:
                while temp < self.num_of_row_account:
                    self.tableAccount.removeRow(self.num_of_row_account - 1)
                    self.num_of_row_account = self.num_of_row_account - 1
            self.num_of_row_account = 0
        elif table_type == 'Blogger':
            temp = 0
            if temp < self.num_of_row_blogger:
                while temp < self.num_of_row_blogger:
                    self.tableBlogger.removeRow(self.num_of_row_blogger - 1)
                    self.num_of_row_blogger = self.num_of_row_blogger - 1
            self.num_of_row_blogger = 0
        elif table_type == 'Log':
            temp = 0
            if temp < self.num_of_row_log:
                while temp < self.num_of_row_log:
                    self.tableLog.removeRow(self.num_of_row_log - 1)
                    self.num_of_row_log = self.num_of_row_log - 1
            self.num_of_row_log = 0


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
